/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const StoreLazyImport = createFileRoute('/store')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()
const DashboardIndexLazyImport = createFileRoute('/dashboard/')()
const UserProfileLazyImport = createFileRoute('/user/profile')()
const DashboardUsersLazyImport = createFileRoute('/dashboard/users')()
const DashboardSuppliersLazyImport = createFileRoute('/dashboard/suppliers')()
const DashboardQsLazyImport = createFileRoute('/dashboard/qs')()
const DashboardOrdersLazyImport = createFileRoute('/dashboard/orders')()
const DashboardInventoryLazyImport = createFileRoute('/dashboard/inventory')()
const AuthRegisterLazyImport = createFileRoute('/auth/register')()
const AuthLogoutLazyImport = createFileRoute('/auth/logout')()
const AuthLoginLazyImport = createFileRoute('/auth/login')()

// Create/Update Routes

const StoreLazyRoute = StoreLazyImport.update({
  path: '/store',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/store.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DashboardIndexLazyRoute = DashboardIndexLazyImport.update({
  path: '/dashboard/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/dashboard/index.lazy').then((d) => d.Route),
)

const UserProfileLazyRoute = UserProfileLazyImport.update({
  path: '/user/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/user/profile.lazy').then((d) => d.Route))

const DashboardUsersLazyRoute = DashboardUsersLazyImport.update({
  path: '/dashboard/users',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/dashboard/users.lazy').then((d) => d.Route),
)

const DashboardSuppliersLazyRoute = DashboardSuppliersLazyImport.update({
  path: '/dashboard/suppliers',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/dashboard/suppliers.lazy').then((d) => d.Route),
)

const DashboardQsLazyRoute = DashboardQsLazyImport.update({
  path: '/dashboard/qs',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/dashboard/qs.lazy').then((d) => d.Route))

const DashboardOrdersLazyRoute = DashboardOrdersLazyImport.update({
  path: '/dashboard/orders',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/dashboard/orders.lazy').then((d) => d.Route),
)

const DashboardInventoryLazyRoute = DashboardInventoryLazyImport.update({
  path: '/dashboard/inventory',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/dashboard/inventory.lazy').then((d) => d.Route),
)

const AuthRegisterLazyRoute = AuthRegisterLazyImport.update({
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/register.lazy').then((d) => d.Route))

const AuthLogoutLazyRoute = AuthLogoutLazyImport.update({
  path: '/auth/logout',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/logout.lazy').then((d) => d.Route))

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/login.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/store': {
      id: '/store'
      path: '/store'
      fullPath: '/store'
      preLoaderRoute: typeof StoreLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/logout': {
      id: '/auth/logout'
      path: '/auth/logout'
      fullPath: '/auth/logout'
      preLoaderRoute: typeof AuthLogoutLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/inventory': {
      id: '/dashboard/inventory'
      path: '/dashboard/inventory'
      fullPath: '/dashboard/inventory'
      preLoaderRoute: typeof DashboardInventoryLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/orders': {
      id: '/dashboard/orders'
      path: '/dashboard/orders'
      fullPath: '/dashboard/orders'
      preLoaderRoute: typeof DashboardOrdersLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/qs': {
      id: '/dashboard/qs'
      path: '/dashboard/qs'
      fullPath: '/dashboard/qs'
      preLoaderRoute: typeof DashboardQsLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/suppliers': {
      id: '/dashboard/suppliers'
      path: '/dashboard/suppliers'
      fullPath: '/dashboard/suppliers'
      preLoaderRoute: typeof DashboardSuppliersLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/users': {
      id: '/dashboard/users'
      path: '/dashboard/users'
      fullPath: '/dashboard/users'
      preLoaderRoute: typeof DashboardUsersLazyImport
      parentRoute: typeof rootRoute
    }
    '/user/profile': {
      id: '/user/profile'
      path: '/user/profile'
      fullPath: '/user/profile'
      preLoaderRoute: typeof UserProfileLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  AboutLazyRoute,
  StoreLazyRoute,
  AuthLoginLazyRoute,
  AuthLogoutLazyRoute,
  AuthRegisterLazyRoute,
  DashboardInventoryLazyRoute,
  DashboardOrdersLazyRoute,
  DashboardQsLazyRoute,
  DashboardSuppliersLazyRoute,
  DashboardUsersLazyRoute,
  UserProfileLazyRoute,
  DashboardIndexLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/store",
        "/auth/login",
        "/auth/logout",
        "/auth/register",
        "/dashboard/inventory",
        "/dashboard/orders",
        "/dashboard/qs",
        "/dashboard/suppliers",
        "/dashboard/users",
        "/user/profile",
        "/dashboard/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/store": {
      "filePath": "store.lazy.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.lazy.tsx"
    },
    "/auth/logout": {
      "filePath": "auth/logout.lazy.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.lazy.tsx"
    },
    "/dashboard/inventory": {
      "filePath": "dashboard/inventory.lazy.tsx"
    },
    "/dashboard/orders": {
      "filePath": "dashboard/orders.lazy.tsx"
    },
    "/dashboard/qs": {
      "filePath": "dashboard/qs.lazy.tsx"
    },
    "/dashboard/suppliers": {
      "filePath": "dashboard/suppliers.lazy.tsx"
    },
    "/dashboard/users": {
      "filePath": "dashboard/users.lazy.tsx"
    },
    "/user/profile": {
      "filePath": "user/profile.lazy.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
